package ch.ibw.nds.appl2017.external;

import com.mscharhag.oleaster.runner.OleasterRunner;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.ssl.SSLContextBuilder;
import org.junit.runner.RunWith;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import static com.mscharhag.oleaster.runner.StaticRunnerSupport.describe;
import static com.mscharhag.oleaster.runner.StaticRunnerSupport.it;


@RunWith(OleasterRunner.class)
public class Test {{

    describe("alphavantage", () -> {
        it("should access https site ignoring certificates", () -> {

                    /**
                     * Code copied from: http://literatejava.com/networks/ignore-ssl-certificate-errors-apache-httpclient-4-4/
                     */

                    HttpClientBuilder b = HttpClientBuilder.create();

                    // setup a Trust Strategy that allows all certificates.
                    //
                    SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy()
                    {
                        public boolean isTrusted(X509Certificate[] arg0, String arg1) throws CertificateException
                        {
                            return true;
                        }
                    }).build();
                    b.setSslcontext(sslContext);

                    // don't check Hostnames, either.
                    //      -- use SSLConnectionSocketFactory.getDefaultHostnameVerifier(), if you don't want to weaken
                    HostnameVerifier hostnameVerifier = SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;;

                    // here's the special part:
                    //      -- need to create an SSL Socket Factory, to use our weakened "trust strategy";
                    //      -- and create a Registry, to register it.
                    //
                    SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(sslContext, hostnameVerifier);
                    Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory> create().register("http", PlainConnectionSocketFactory.getSocketFactory()).register("https", sslSocketFactory).build();

                    // now, we create connection-manager using our Registry.
                    //      -- allows multi-threaded use
                    PoolingHttpClientConnectionManager connMgr = new PoolingHttpClientConnectionManager(socketFactoryRegistry);
                    b.setConnectionManager(connMgr);

                    // finally, build the HttpClient;
                    //      -- done!
                    HttpClient client = b.build();

                    HttpGet get = new HttpGet("https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=GOGL&outputsize=full&apikey=IC2ZRP67FJJQ79DV");
                    //get.setFollowRedirects(true);

                    HttpResponse response = client.execute(get);
                    HttpEntity entity = response.getEntity();

                    // ausgabe
                    String inputLine ;
                    BufferedReader br = new BufferedReader(new InputStreamReader(entity.getContent()));
                    try {
                        while ((inputLine = br.readLine()) != null) {
                            System.out.println(inputLine);
                        }
                        br.close();
                    } catch (IOException e) {
                        e.printStackTrace();
            }

                    //if you got this far, you made it


        });
    });

}}